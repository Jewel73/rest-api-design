package com.jewel.ecom.hateoas;

import static java.util.stream.Collectors.toList;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.util.List;
import java.util.Objects;
import java.util.stream.StreamSupport;

import com.jewel.ecom.api.model.User;
import com.jewel.ecom.controller.CustomerController;
import com.jewel.ecom.entity.UserEntity;
import org.springframework.beans.BeanUtils;
import org.springframework.hateoas.server.mvc.RepresentationModelAssemblerSupport;
import org.springframework.stereotype.Component;

@Component
public class UserRepresentationModelAssembler extends
        RepresentationModelAssemblerSupport<UserEntity, User> {

    /**
     * Creates a new {@link RepresentationModelAssemblerSupport} using the given controller class and
     * resource type.
     */
    public UserRepresentationModelAssembler() {
        super(CustomerController.class, User.class);
    }

    /**
     * Coverts the User entity to resource
     *
     * @param entity
     */
    @Override
    public User toModel(UserEntity entity) {
        User resource = createModelWithId(entity.getId(), entity);
        BeanUtils.copyProperties(entity, resource);
        resource.setId(entity.getId().toString());
        // Self link generated by createModelWithId has missing api path. Therefore, generating additionally.
        // can be removed once fixed.
        try {
            resource.add(
                    linkTo(methodOn(CustomerController.class).getCustomerById(entity.getId().toString()))
                            .withSelfRel());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        try {
            resource.add(
                    linkTo(methodOn(CustomerController.class).getAllCustomers()).withRel("customers"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        try {
            resource
                    .add(
                            linkTo(methodOn(CustomerController.class)
                                    .getAddressesByCustomerId(entity.getId().toString())).withRel("self_addresses"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return resource;
    }

    /**
     * Coverts the collection of Product entities to list of resources.
     *
     * @param entities
     */
    public List<User> toListModel(Iterable<UserEntity> entities) {
        if (Objects.isNull(entities)) {
            return List.of();
        }
        return StreamSupport.stream(entities.spliterator(), false).map(this::toModel)
                .collect(toList());
    }

}